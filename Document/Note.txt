Programming Note

12 10 22
원격 디버깅 설정을 했습니다.

12 10 23 ~ 24
WPF 등에 있었던 WriteableBitmap.Render 등 비트맵으로의 출력이 삭제된 덕에 고생 좀 했습니다.
그렇다고 벡터를 화면에 직접 출력하자니 너무 느린 등의 문제가 있었습니다.
라인으로 출력하는 편이 그나마 퍼포먼스가 좋아보였지만, 선 중복 문제가..

12 10 25
딱 하나 InkManager에 파일로 저장하는 메소드가 있었습니다.
해당 메소드에 InMemoryRandomAccessStream 객체를 넣어서 구현해보려 했지만 실패했습니다.
이것저것 찾아보던 중 MemoryRandomAccessStream 이라는 키워드를 얻었고 한 블로거가 System.IO.MemoryStream을 포팅한 클래스의 포스팅을 찾을 수 있었습니다.
해당 클래스를 이용해서 진행하면 제대로 작동합니다.
이슈가 두 가지 발생했습니다.
1. 현재는 선 겹침 문제가 해결되지 않았습니다. InkManager를 초기화해서 최대한 퍼포먼스를 좋게 만들어야 할 필요성.
2. 실제 그려진 위치와 떨어진 위치에 이미지가 나타납니다. 그려진 부분만을 클리핑해서 파일로 만들기 때문에 그런 듯.
차후 수정할 필요가 있습니다.

12 10 26
최대한 실제 그려진 위치와 일치한 곳에 벡터가 그려지도록 했습니다.
Image를 Fill 형태로 그려지게 하고 InkManager의 BoundingRect를 Image에 적용했습니다.
InkManager 를 남겨두는 편이 통신을 고려하면 더 좋을지도 모르겠습니다.
터치를 통해 캔버스를 움직이는 기능울 구현하였습니다.
InkManager 를 남겨두니까 부하가 엄청 걸리네요.
비트맵을 합치는 방법을 사용해야 할 듯.
메모리 버퍼는 최대한 생성하지 않는 편이 나은 것 같습니다.

12 10 27
Image를 여러 개 Child로 추가하는 편이 가장 퍼포먼스가 좋았습니다.
겹쳤을 때 테두리가 하얗게 되는 현상을 확인하였습니다.

12 10 28
Bezier를 렌더링 할 때 계속 겹쳐 그리고 있던 것을 발견하였습니다.
그때마다 inkManager를 초기화하니 퍼포먼스가 좋아졌습니다. 오예.
확대/축소를 구현하였습니다. 마우스/터치 모두 가능. 0.5배 ~ 2배까지
Ctrl-Z를 구현했습니다.

12 10 29
Appbar를 추가했습니다.
리팩토링을 하였습니다.
색 변경 기능을 구현하였습니다.
굵기 변경 기능을 구현하였습니다.
Scaling이 너무 느립니다. 보완하고 싶은데.. 

12 10 30
Scaling 속도를 DoubleAnimation을 통해 개선하였습니다. 1.5배씩 확대 축소됨.
기존 Translate > Scale을 Scale > Transform으로 바꾸고 핀치 투 줌을 다시 구현하였습니다.

12 11 01
SkyDrive에 연동을 하면.. 서버, 트래픽, 하드, 파일시스템, 권한 문제같은게 한번에 해결되는데..

12 11 03 ~ 04
Network 연동 작업, Palm Block 작업
